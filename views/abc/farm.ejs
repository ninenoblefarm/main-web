<!DOCTYPE html>
<!--  Last Published: Thu Jul 21 2022 02:46:52 GMT+0000 (Coordinated Universal Time)  -->
<html data-wf-page="62b8ec862a77f66da0d2db38" data-wf-site="62b8ec862a77f6c335d2db37">

<head>
    <meta charset="utf-8">
    <title>Ninenoble - Harvest our Tax</title>
    <meta content="Say goodbye to inflation token" name="description">
    <meta content="Ninenoble - Harvest our Tax" property="og:title">
    <meta content="Say goodbye to inflation token" property="og:description">
    <meta content="images/nnn200.png" property="og:image">
    <meta content="Ninenoble - Harvest our Tax" property="twitter:title">
    <meta content="Say goodbye to inflation token" property="twitter:description">
    <meta content="images/nnn200.png" property="twitter:image">
    <meta property="og:type" content="website">
    <meta content="summary_large_image" name="twitter:card">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <link href="css/normalize.css" rel="stylesheet" type="text/css">
    <link href="css/components.css" rel="stylesheet" type="text/css">
    <link href="css/ninenoble.css" rel="stylesheet" type="text/css">
    <script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <script src="/js/function.js"></script>
    <script type="text/javascript">
        WebFont.load({
            google: {
                families: ["Inter:300,regular,500,600,700,800,900", "Caveat:regular,500,600,700"]
            }
        });
    </script>
    <!-- [if lt IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js" type="text/javascript"></script><![endif] -->
    <script type="text/javascript">
        ! function(o, c) {
            var n = c.documentElement,
                t = " w-mod-";
            n.className += t + "js", ("ontouchstart" in o || o.DocumentTouch && c instanceof DocumentTouch) && (n.className += t + "touch")
        }(window, document);
    </script>
    <link href="images/nnn200.png" rel="shortcut icon" type="image/x-icon">
    <link href="images/nnn200.png" rel="apple-touch-icon">
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-3MLQV3CKKH"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }
        gtag('js', new Date());

        gtag('config', 'G-3MLQV3CKKH');
    </script>
</head>

<body>

    <div class="popup">
        <a data-w-id="f643886e-9824-3ffb-e6f9-dd81604f7612" href="#" class="close w-inline-block"></a>
        <div class="popup-container">
            <div class="w-layout-grid popup-grid">
                <a rel="nofollow" id="w-node-_60c8453e-8cd5-4a6c-4c10-d6dc2876dd8f-a0d2db38" href="https://pancakeswap.finance/swap?outputCurrency=0xC866987195f2EEA49A170e328ac26E7B5565352f" target="_blank" class="w-inline-block"><img src="images/pancakeswap.png" loading="lazy" width="160" alt=""></a>
                <a id="w-node-_478553e1-3221-03ec-d594-1d9b5e6f8d53-a0d2db38" href="#" class="w-inline-block"><img src="images/enhanceswap.png" loading="lazy" width="120" alt="" class="popup-image hide"></a>
            </div>
        </div>
    </div>
    <div class="page-wrapper">
        <div data-animation="default" data-collapse="medium" data-duration="400" data-easing="ease" data-easing2="ease" role="banner" class="navbar w-nav">
            <div class="w-layout-grid navbar-grid">
                <a href="/" class="brand w-nav-brand"><img src="images/nnn200.png" loading="lazy" srcset="images/nnn200.png 500w, images/nnn200.png 742w" sizes="(max-width: 479px) 40px, 50.000003814697266px" alt="" class="logo">
                    <div class="logo-text-wrap">
                        <div class="logo-text">Ninenoble</div>
                        <div class="slogan">Harvest our Tax</div>
                    </div>
                </a>
                <nav role="navigation" class="nav-menu w-nav-menu">

                    <a href="#tokenomics" class="nav-link w-nav-link">Tokenomics</a>
                    <a href="#roadmap" class="nav-link w-nav-link">Roadmap</a>
                    <a href="#contact" class="nav-link w-nav-link">Contact</a>
                    <a href="https://docs.ninenoble.org" class="nav-link w-nav-link">Whitepaper</a>
                </nav>
                <div id="w-node-d5eb6e74-d462-11b7-596c-6cc793d98b6f-a0d2db38" class="nav-button-wrap">
                    <div data-w-id="abcac39c-cd17-6634-c7dc-a18421c77d40" style="opacity:0" class="hero-social-wrap">
                        <a href="#" class="social-link hide w-inline-block"><img src="images/telegram.svg" loading="lazy" alt=""></a>
                        <a rel="nofollow" href="https://twitter.com/Ninenoble_Org" target="_blank" class="social-link w-inline-block"><img src="images/twitter.svg" loading="lazy" alt=""></a>
                        <a rel="nofollow" href="https://t.me/ninenoble" target="_blank" class="social-link w-inline-block"><img src="images/promotion.svg" loading="lazy" alt=""></a>
                        <a rel="nofollow" href="https://t.me/ninenobleglobal" target="_blank" class="social-link w-inline-block"><img src="images/telegram_1.svg" loading="lazy" alt=""></a>
                        <a href="#" class="social-link hide w-inline-block"><img src="images/instagram.svg" loading="lazy" alt=""></a>

                    </div>
                    <div data-hover="true" data-delay="0" class="button-dropdown w-dropdown">

                        <div class="button-dropdown-toggle orange nav-button w-dropdown-toggle btnconnect" onclick="connect()">

                            Connect

                        </div>


                    </div>
                    <div id="w-node-_3004ef00-2a70-a439-9ada-038ee91d94d7-a0d2db38" class="menu-button w-nav-button">
                        <div class="w-icon-nav-menu"></div>
                    </div>
                </div>
            </div>
            <div class="navbar-background"></div>
        </div>
        <div id="top" class="hero-section">
            <div class="section wf-section">
                <div class="margin-top">
                    <div class="container-small">
                        <div class="content-centered">
                            <!-- <div data-w-id="d87eda83-7387-aac4-723d-2ade97e04966" style="opacity:0" class="supply-wrapper">
                                <div class="supply-left">
                                    <div class="supply-title">CSupply:</div>
                                    <div class="supply-number">9,610 T</div>
                                </div>
                                <div class="supply-right">
                                    <div class="burn-percentage">ðŸ”¥ 1.853% Burned</div>
                                    <div class="supply-date">Updated: 7-20-22</div>
                                </div>
                            </div> -->
                            <h1 data-w-id="8bcbaaa5-2e58-a46e-b451-182a4a5e3591" style="opacity:0" class="hero-heading">Farm Liquidity</h1>
                            <p data-w-id="3a746c14-96f1-ca57-4fea-45a4327eded0" style="opacity:0" class="hero-paragraph">
                                Every Ninenoble transaction will send 3% tax to this farming platform, and Everyone can claim it by farming liquidity (NNN-BNB).
                                <br>
                                <!-- <strong class="yellow-semi-bold">3% tax sent to farm pool!</strong></p> -->

                                <div class="contract-wrap">
                                    <div data-w-id="8d80ebe8-4d0e-b9b4-7bc5-8cb00714858b" style="opacity:0" class="small-title">Farming Contract:</div>
                                    <div data-w-id="c9b0909e-96f1-e562-03e9-73382217c464" style="opacity:0" class="w-embed w-script">
                                        <div class="copy-form-block w-form">
                                            <div class="copy-form">
                                                <input value="0xfe7Da32f4F4e15Da115587a78bCD6Fc44951eF64" type="text" class="input-copy w-input text-center" name="token" id="token">
                                                <input type="submit" value="Copy" id="btnCopy" class="copy-button w-button">
                                            </div>
                                            <script type="text/javascript">
                                                {
                                                    var tokenInput1 = document.getElementById("token");
                                                    var btnCopy = document.getElementById("btnCopy");
                                                    btnCopy.onclick = function() {
                                                        tokenInput1.select();
                                                        tokenInput1.setSelectionRange(0, 999999999);
                                                        document.execCommand("copy");
                                                        alert("Contract address copied to clipboard successfully");
                                                    };
                                                }
                                            </script>
                                        </div>
                                    </div>
                                    <!-- <div data-w-id="81b7dc16-1653-5fc3-42b3-ef45a9e861b2" style="opacity:0" class="hero-brands-wrapper"> -->

                                    <!-- <a rel="nofollow" href="https://pancakeswap.finance/swap?outputCurrency=0xC866987195f2EEA49A170e328ac26E7B5565352f" target="_blank" class="hero-brand-link w-inline-block"><img src="images/pancakeswap_1.png" loading="lazy" srcset="images/pancakeswap_1-p-500.png 500w, images/pancakeswap_1.png 600w" sizes="(max-width: 479px) 20vw, (max-width: 991px) 23vw, 175.39930725097656px" alt="" class="hero-brand-image"></a>
                                    <a rel="nofollow" href="https://www.pinksale.finance/launchpad/0x3FB9c6A610f9ee732D2f3dF0c922BC1564220423?chain=BSC" target="_blank" class="hero-brand-link w-inline-block"><img src="images/pinksale.png" loading="lazy" srcset="images/pinksale-p-500.png 500w, images/pinksale-p-800.png 800w, images/pinksale.png 832w" sizes="(max-width: 479px) 14vw, (max-width: 991px) 16vw, 121.8055648803711px"
                                            alt="" class="hero-brand-image smaller"></a>
                                    <a rel="nofollow" href="https://coinmarketcap.com/currencies/Ninenoble/" target="_blank" class="hero-brand-link w-inline-block"><img src="images/cmc.png" loading="lazy" srcset="images/cmc.png 500w, images/cmc.png 600w" sizes="(max-width: 479px) 20vw, (max-width: 991px) 23vw, 175.39930725097656px" alt="" class="hero-brand-image"></a>
                               -->
                                    <div data-w-id="8d80ebe8-4d0e-b9b4-7bc5-8cb00714858b" style="opacity:0" class="small-title">Ninenoble Available Reward : </div>

                                    <h1 id="av" class="section-heading gradient-text" style="opacity: 1; transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">0</h1>
                                    <!-- </div> -->

                                    <div data-w-id="8d80ebe8-4d0e-b9b4-7bc5-8cb00714858b" style="opacity:0" class="small-title">Invite friends and get 10% from their harvest reward :</div>
                                    <div data-w-id="c9b0909e-96f1-e562-03e9-73382217c464" style="opacity:0" class="w-embed w-script">
                                        <div class="copy-form-block w-form">
                                            <div class="copy-form">
                                                <input value="https://ninenoble.org/farm/" type="text" class="input-copy w-input text-center" name="aff" id="aff">
                                                <input type="submit" value="Copy" id="btnCopyaff" class="copy-button w-button">
                                            </div>
                                            <script type="text/javascript">
                                                {
                                                    var tokenInput = document.getElementById("aff");
                                                    var btnCopy2 = document.getElementById("btnCopyaff");
                                                    btnCopy2.onclick = function() {
                                                        tokenInput.select();
                                                        tokenInput.setSelectionRange(0, 999999999);
                                                        document.execCommand("copy");
                                                        alert("Contract address copied to clipboard successfully");
                                                    };
                                                }
                                            </script>
                                        </div>
                                    </div>
                                </div>
                        </div>
                    </div>
                    <div class="featured-wrapper hide">
                        <div>
                            <div data-w-id="e3a9f2f7-bd8d-c707-9b38-f5c0a1d1ec22" style="opacity:0" class="featured-title">Featured In:</div>
                        </div>
                        <div data-w-id="e3a9f2f7-bd8d-c707-9b38-f5c0a1d1ec24" style="opacity:0" class="featured-logo-wrapper"><img src="images/press-wsj.png" loading="lazy" srcset="images/press-wsj-p-500.png 500w, images/press-wsj.png 600w" sizes="100vw" alt="" class="featured-logo"><img src="images/press-bloomberg.png" loading="lazy" alt="" class="featured-logo">
                            <img src="images/press-businesswire.png" loading="lazy" srcset="images/press-businesswire-p-500.png 500w, images/press-businesswire.png 600w" sizes="100vw" alt="" class="featured-logo"><img src="images/press-huffpost.png" loading="lazy"
                                alt="" class="featured-logo"><img src="images/press-yahoo.png" loading="lazy" alt="" class="featured-logo"></div>
                    </div>
                </div>
                <div class="hero-bg"></div>
                <!-- <div data-poster-url="videos/video3-poster-00001.jpg" data-video-urls="videos/video3-transcode.mp4,videos/video3-transcode.webm" data-autoplay="true" data-loop="true" data-wf-ignore="true" class="hero-video w-background-video w-background-video-atom"><video id="f7b9afda-9545-1193-23e7-cb9d40b260eb-video" autoplay="" loop="" style="background-image:url(&quot;videos/video3-poster-00001.jpg&quot;)" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover"> -->
                <!-- <source src="videos/video3-transcode.mp4" data-wf-ignore="true">
            <source src="videos/video3-transcode.webm" data-wf-ignore="true"> -->
                </video>
            </div>
        </div>
    </div>



    <div id="Presale" class="section   wf-section">
        <div class="  col-12  ">
            <!-- <h2 class="section-heading gradient-text text-center" style="opacity: 1; transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">This feature cooming soon</h2> -->
        </div>
        <div class="container-large w-container">
            <div data-w-id="319c99cc-5612-f3ac-b5af-610ef7b2f1da" style="opacity:0" class="w-layout-grid presale-grid">
                <div id="w-node-d000e992-978e-d52e-0ce0-ada078bdad30-a0d2db38" class="image-wrapper"><img src="images/nnn1000.png" loading="lazy" srcset="images/nnn1000.png 500w, images/nnn1000.png 800w, images/nnn1000.png 1080w, images/nnn1000.png 1289w" sizes="100vw" alt="" class="presale-image"></div>
                <div id="w-node-_4389f62c-b4d7-275a-9d37-c15fd303f8a6-a0d2db38" class="presale-grid-right">
                    <div class="bg-pattern"></div>
                    <div class="presale-content">
                        <h2 class="presale-title text-center">Liquidity Farm</h2>
                        <p class="presale-text text-center">Farm your NNN-BNB Liquidity and Harvest Ninenoble everytime.</p>
                        <div class="top-margin">
                            <div class="row text-center" style="font-size:15px">
                                <div class="  col-12  ">
                                    <h2 class="section-heading gradient-text" style="opacity: 1; transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg); transform-style: preserve-3d;">APR <span id="apr-0">0</span>%</h2>
                                </div>
                                <div class=" mt-2   col-4  "> Locked LP <br> <b class="text-success" id="totallp-0">0</b> <small> <br> ($<span id="lp-0">0</span>)  </small></div>
                                <div class=" mt-2   col-4 "> Your LP <br> <b class="text-success" id="userlp-0">0</b> <small> <br> ($<span id="lpu-0">0</span>)  </small></div>
                                <div class=" mt-2   col-4  "> Reward NNN <br> <b class="text-success" id="userreward-0">0</b> <small>  <br>($<span id="reward-0">0</span>)  </small></div>

                                <div class="col-12 mt-2 text-center  ">

                                    <div class=" inputam-0" style="display:none; border:1px solid rgb(130, 146, 105);background-color: #555;padding:10px">
                                        <p>Your LP at wallet : <b class="walletlp0">0</b></p>
                                        <input id="amdp-0" class="col-12 text-center p-1" style='color:black' placeholder="LP Amount">
                                        <button type="button" class="btn btn-sm mt-2 btn-primary" onclick="DepositF(0,$('#amdp-0').val())">Deposit LP</button>
                                        <button type="button" class="btn btn-sm mt-2 btn-primary" onclick="$('#amdp-0').val($('.walletlp0').first().text())">Max </button>

                                    </div>

                                    <div class=" inputwd-0" style="display:none; border:1px solid rgb(130, 146, 105);background-color: #555;padding:10px">
                                        <p>Your LP available : <b class="userlp-0">0</b></p>
                                        <input id="amwd-0" class="col-12 text-center p-1" style='color:black' placeholder="LP Amount">
                                        <button type="button" class="btn btn-sm mt-2 btn-primary" onclick="Withdraw(0,$('#amwd-0').val())">Withdraw LP</button>
                                    </div>




                                </div>


                                <div class=" mt-2   col-4 connected ">
                                    <button class="btn appr3-0  btn-outline-primary btn-sm " onclick="reqappr3(1,0)" style="">
                                Approve
                                </button>
                                    <button class="btn dplp3-0 btn-outline-info btn-sm " style="display: none;" onclick="$(&quot;.inputam-0&quot;).toggle();">
                                Deposit
                                </button></div>
                                <div class=" mt-2   col-4  connected ">
                                    <button class="btn  btn-outline-warning btn-sm " onclick="$(&quot;.inputwd-0&quot;).toggle();">
                                    Withdraw
                                    </button></div>
                                <div class=" mt-2   col-4  connected ">
                                    <button class="btn  btn-outline-success btn-sm " onclick="DepositF(0,0)">
                                    Harvest
                                    </button></div>

                                <button class="disconnected btn col-12 btn-outline-success btn-sm" onclick="connect()">

                                        Connect
        
                                    </button>

                            </div>

                            <div class="col-12 text-center mt-3 ">
                                <a href="https://pancakeswap.finance/liquidity" style="text-decoration:none"> <span style="color:white;text-decoration:none"> Create LP</span> </a>
                            </div>



                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>






    <div class="section bg-dark wf-section">
        <div class="container-large w-container">

            <!-- <div data-w-id="9305a5dc-ae31-38c2-3979-de2ce32df2d6" style="opacity:0" class="w-layout-grid footer-grid"> -->

            <div class="footer-social-wrap">
                <!-- <a href="#" class="social-link hide w-inline-block"><img src="images/telegram.svg" loading="lazy" alt=""></a> -->
                <a rel="nofollow" href="https://twitter.com/Ninenoble_Org" target="_blank" class="social-link w-inline-block"><img src="images/twitter.svg" loading="lazy" alt=""></a>
                <a rel="nofollow" href="https://t.me/ninenoble" target="_blank" class="social-link w-inline-block"><img src="images/promotion.svg" loading="lazy" alt=""></a>

                <a rel="nofollow" href="https://t.me/NinenobleOfficial" target="_blank" class="social-link w-inline-block"><img src="images/telegram_1.svg" loading="lazy" alt=""></a>
            </div>
            <!-- </div> -->
            <div class="disclaimer">
                <div class="eyebrow">Disclaimer</div>
                <p data-w-id="ad832868-e014-54c0-1ffd-cfb192bd85bc" style="opacity:0" class="disclaimer-text">The information provided on this website does not constitute investment advice, financial advice, trading advice, or any other sort of advice and you should not treat any of the website's content as such. Ninenoble does not recommend that
                    any cryptocurrency should be bought, sold, or held by you. Do conduct your own due diligence and consult your financial advisor before making any investment decisions.</p>
            </div>
        </div>
    </div>
    </div>
    <script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=62b8ec862a77f6c335d2db37" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="js/ninenoble.js" type="text/javascript"></script>
    <!-- [if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif] -->
</body>

</html>



<script>
    var serverbnb = "https://bsc-dataseed1.defibit.io/";
    const web3 = new Web3(new Web3.providers.HttpProvider(serverbnb));
    let CONTRACT = "0xfe7Da32f4F4e15Da115587a78bCD6Fc44951eF64";
    let NNN = "0xC866987195f2EEA49A170e328ac26E7B5565352f";
    let LP = "0x703aDE9FF10c39606EcDbbf17d3e5602001782f1";
    let RATEBNB = 0;
    let RATENNN = 0;
    let SUPPLYLP = 0;
    let ONLP = 0;
    let RATELP = 0;


    let abilp = [{
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "Approval",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
        }],
        "name": "Burn",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
        }],
        "name": "Mint",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount0In",
            "type": "uint256"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount1In",
            "type": "uint256"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount0Out",
            "type": "uint256"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount1Out",
            "type": "uint256"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
        }],
        "name": "Swap",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": false,
            "internalType": "uint112",
            "name": "reserve0",
            "type": "uint112"
        }, {
            "indexed": false,
            "internalType": "uint112",
            "name": "reserve1",
            "type": "uint112"
        }],
        "name": "Sync",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "Transfer",
        "type": "event"
    }, {
        "constant": true,
        "inputs": [],
        "name": "DOMAIN_SEPARATOR",
        "outputs": [{
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "MINIMUM_LIQUIDITY",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "PERMIT_TYPEHASH",
        "outputs": [{
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }, {
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "name": "allowance",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "approve",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "name": "balanceOf",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "to",
            "type": "address"
        }],
        "name": "burn",
        "outputs": [{
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [{
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "factory",
        "outputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "getReserves",
        "outputs": [{
            "internalType": "uint112",
            "name": "_reserve0",
            "type": "uint112"
        }, {
            "internalType": "uint112",
            "name": "_reserve1",
            "type": "uint112"
        }, {
            "internalType": "uint32",
            "name": "_blockTimestampLast",
            "type": "uint32"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "_token0",
            "type": "address"
        }, {
            "internalType": "address",
            "name": "_token1",
            "type": "address"
        }],
        "name": "initialize",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "kLast",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "to",
            "type": "address"
        }],
        "name": "mint",
        "outputs": [{
            "internalType": "uint256",
            "name": "liquidity",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "name": "nonces",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "owner",
            "type": "address"
        }, {
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
        }, {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
        }, {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
        }, {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
        }],
        "name": "permit",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "price0CumulativeLast",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "price1CumulativeLast",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "to",
            "type": "address"
        }],
        "name": "skim",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "uint256",
            "name": "amount0Out",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "amount1Out",
            "type": "uint256"
        }, {
            "internalType": "address",
            "name": "to",
            "type": "address"
        }, {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
        }],
        "name": "swap",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [],
        "name": "sync",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "token0",
        "outputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "token1",
        "outputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "to",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "transfer",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "constant": false,
        "inputs": [{
            "internalType": "address",
            "name": "from",
            "type": "address"
        }, {
            "internalType": "address",
            "name": "to",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "transferFrom",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }];
    var abi = [{
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
        }],
        "name": "OwnershipTransferred",
        "type": "event"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }, {
            "internalType": "address",
            "name": "_user",
            "type": "address"
        }],
        "name": "balanceLP",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [],
        "name": "clearBNB",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "token_staking",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "_divider",
            "type": "uint256"
        }],
        "name": "createFarm",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
        }, {
            "internalType": "address",
            "name": "_upline",
            "type": "address"
        }],
        "name": "deposit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "owner",
        "outputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }, {
            "internalType": "address",
            "name": "_user",
            "type": "address"
        }],
        "name": "pendingReward",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "name": "poolInfo",
        "outputs": [{
            "internalType": "address",
            "name": "tokenStaking",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "accPerShare",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "totalLP",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "rewardPerBlock",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "lastRewardBlock",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "lock_deposit_block",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "divider",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }, {
            "internalType": "address",
            "name": "_user",
            "type": "address"
        }],
        "name": "timelock",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
        }],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }],
        "name": "updatePool",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "_divider",
            "type": "uint256"
        }],
        "name": "updatedivider",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }, {
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "name": "userInfo",
        "outputs": [{
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "rewardDebt",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "release_block",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "_pid",
            "type": "uint256"
        }, {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
        }],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }];
    let ABIERC20 = [{
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "Approval",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
        }],
        "name": "OwnershipTransferred",
        "type": "event"
    }, {
        "anonymous": false,
        "inputs": [{
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
        }, {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
        }, {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
        }],
        "name": "Transfer",
        "type": "event"
    }, {
        "inputs": [],
        "name": "MaxTaxPerM",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "uint256",
            "name": "taxFee",
            "type": "uint256"
        }],
        "name": "SetTaxPerM",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "TaxPerM",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "owner",
            "type": "address"
        }, {
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }],
        "name": "allowance",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
        }],
        "name": "approve",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "account",
            "type": "address"
        }],
        "name": "balanceOf",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "token",
            "type": "address"
        }],
        "name": "clear",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "clearBNB",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "decimals",
        "outputs": [{
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "subtractedValue",
            "type": "uint256"
        }],
        "name": "decreaseAllowance",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "devAddress",
        "outputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "spender",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "addedValue",
            "type": "uint256"
        }],
        "name": "increaseAllowance",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "name",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [],
        "name": "owner",
        "outputs": [{
            "internalType": "address",
            "name": "",
            "type": "address"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "addr",
            "type": "address"
        }],
        "name": "setDevAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [],
        "name": "symbol",
        "outputs": [{
            "internalType": "string",
            "name": "",
            "type": "string"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [{
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
        }],
        "stateMutability": "view",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "recipient",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
        }],
        "name": "transfer",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "sender",
            "type": "address"
        }, {
            "internalType": "address",
            "name": "recipient",
            "type": "address"
        }, {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
        }],
        "name": "transferFrom",
        "outputs": [{
            "internalType": "bool",
            "name": "",
            "type": "bool"
        }],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "inputs": [{
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
        }],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }, {
        "stateMutability": "payable",
        "type": "receive"
    }];


    let CONNECT = false;
    $(".connected").hide();
    // $(".disconnected").hide();
    async function isConnected() {
        const accounts = await ethereum.request({
            method: 'eth_accounts'
        });
        if (accounts.length) {
            console.log(`You're connected to: ${accounts[0]}`);
            connect();
            $(".connected").show();
            $(".disconnected").hide();
        } else {
            console.log("Metamask is not connected");
        }
    }
    isConnected();

    async function connect() {
        const web3 = new Web3(ethereum);
        const accounts = await ethereum.request({
            method: 'eth_requestAccounts'
        });
        var fr = accounts[0];
        console.log(accounts);
        if (accounts.length > 0) {
            CONNECT = true;
            $(".btnconnect").html("0x.." + accounts[0].slice(-5));
            $("#aff").val("https://ninenoble.org/farm/" + accounts[0])
        }
        return accounts;
    }


    async function getratebnb() {
        // const web3 = new Web3(ethereum);

        let aaa = "0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16";
        var contract = new web3.eth.Contract(abilp, aaa);
        try {
            await contract.methods.getReserves().call().then(function(resp) {

                //console.log(resp);


                RATEBNB = ((resp[1] / (10 ** 18)) / (resp[0] / (10 ** 18))) * 1;
                //console.log(RATEBNB, "RATE BNB");

            });
        } catch (error) {
            //console.log(error)
        }


    }

    setInterval(getratebnb, 10000);
</script>


<script>
    async function wd() {


        const web3 = new Web3(ethereum);




        const accounts = await ethereum.request({
            method: 'eth_requestAccounts'
        });
        var fr = accounts[0];
        var co = new web3.eth.Contract(abi, CONTRACT);

        var tx = {
            from: fr,
            to: CONTRACT,
            data: co.methods.unvesting().encodeABI()

        };
        web3.eth.sendTransaction(tx).then(res => {

        }).catch(err => {
            //console.log("err", err)
        });

    }




    {
        async function abb() {

            // //  const web3 = new Web3(ethereum); 
            if (CONNECT) {} else return;

            const accounts = await ethereum.request({
                method: 'eth_requestAccounts'
            });
            var fr = accounts[0];

            try {

                var contract = new web3.eth.Contract(ABIERC20, NNN);

                await contract.methods.balanceOf(fr).call().then(function(resp) {

                    $("#userwalletNNN").html((resp / (10 ** 18)).toFixed(8));
                    $("#userwalletNNNr").html((resp / (10 ** 18) * RATENNN).toFixed(2));

                });
            } catch (error) {

            }
        }

        abb();
        setInterval(abb, 10000);

    }



    {
        async function acc() {

            //  //  const web3 = new Web3(ethereum); 
            if (CONNECT) {} else return;

            const accounts = await ethereum.request({
                method: 'eth_requestAccounts'
            });
            var fr = accounts[0];

            try {

                var contract = new web3.eth.Contract(ABIERC20, LP);

                await contract.methods.balanceOf(fr).call().then(function(resp) {
                    //console.log(resp, " LP");
                    let lpa = Math.floor((resp * 1) / (10 ** 10)) / (10 ** 8);
                    $(".walletlp0").html(lpa.toFixed(8));


                    // $("#userwalletlpr").html((resp / (10 ** 18) * RATELP * 2).toFixed(2));

                });
            } catch (error) {
                //console.log(error)

            }
        }

        acc();
        setInterval(acc, 10000);

    }




    // {
    //     async function add() {

    //         //  //  const web3 = new Web3(ethereum); 
    //         if (CONNECT) {} else return;

    //         const accounts = await ethereum.request({
    //             method: 'eth_requestAccounts'
    //         });
    //         var fr = accounts[0];

    //         try {

    //             var contract = new web3.eth.Contract(abi, CONTRACT);

    //             await contract.methods.balanceLP(0, fr).call().then(function(resp) {

    //                 $("#userlp").html((resp / (10 ** 18)).toFixed(8));
    //                 $("#userlpr").html((resp / (10 ** 18) * RATELP * 2).toFixed(2));

    //             });
    //         } catch (error) {

    //         }
    //     }

    //     add();
    //     setInterval(add, 10000);

    // }




    // {
    //     async function axx() {

    //         //  //  const web3 = new Web3(ethereum); 
    //         if (CONNECT) {} else return;

    //         const accounts = await ethereum.request({
    //             method: 'eth_requestAccounts'
    //         });
    //         var fr = accounts[0];

    //         try {

    //             var contract = new web3.eth.Contract(abi, CONTRACT);

    //             await contract.methods.pendingReward(0, fr).call().then(function(resp) {

    //                 $("#userreward").html((resp).toFixed(0));
    //                 $("#userrewardr").html((resp * RATENNN).toFixed(2));

    //             });
    //         } catch (error) {

    //         }
    //     }

    //     axx();
    //     setInterval(axx, 10000);

    // }
</script>
<script>
    async function reqappr3(app = 0, pid = 0) {



        let lp = LP;

        console.log(CONNECT);


        if (CONNECT) {} else return;
        const web3 = new Web3(ethereum);
        const accounts = await ethereum.request({
            method: 'eth_requestAccounts'
        });
        var fr = accounts[0];
        var contract4 = new web3.eth.Contract(ABIERC20, lp);


        await contract4.methods.allowance(fr, CONTRACT).call().then(function(resp) {

            console.log(resp);

            if (resp > 999999999) {
                $(".appr3-" + pid).hide();
                $(".dplp3-" + pid).show();
                return true;
            } else {

                if (app == 0) return;

                // const web3 = new Web3(ethereum);
                //const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                //const account = accounts[0];
                var contract = contract4; // new web3.eth.Contract(ABIERC20, LP);
                var amn = "115792089237316195423570985008687907853269984665640564039457584007913129639935";

                console.log(contract);
                contract.methods.approve(CONTRACT, amn).send({
                        from: fr
                    },
                    function(err, transactionHash) {

                        // $(".appr3-" + pid).hide();
                        // $(".dplp3-" + pid).show();
                        //HANDLE.Approve(pid, transactionHash);
                        return true;
                    });
            }
        });


    }

    reqappr3(0, 0);

    setInterval(reqappr3, 10000);
</script>


<script>
    async function DepositF(pid, am) {

        reqappr3(0, 1);

        let upline = "0x0000000000000000000000000000000000000000";
        if (getCookie("upline") && getCookie("upline").length == 42) upline = getCookie("upline");


        var digit = 18;
        const web3 = new Web3(ethereum);



        const accounts = await ethereum.request({
            method: 'eth_requestAccounts'
        });
        var fr = accounts[0];
        var contract = new web3.eth.Contract(abi, CONTRACT);
        am = am * (10 ** digit);
        var amn = BigInt(Math.floor(am));
        amn += "";

        var tx = {
            from: fr,
            to: CONTRACT,
            data: contract.methods.deposit(pid, amn, upline).encodeABI()

        };
        web3.eth.sendTransaction(tx).then(res => {
            //hideLoader();
            //HANDLE.DepositF(pid, res);
            //WALLET.getWalletLpBalance(pid);
            //console.log("res",res);
        }).catch(err => {
            //onsole.log("err",err)
        });




    }
</script>



<script>
    async function Withdraw(pid, am) {
        var co = CONTRACT;
        var digit = 18;

        const web3 = new Web3(ethereum);



        const accounts = await ethereum.request({
            method: 'eth_requestAccounts'
        });
        var fr = accounts[0];
        var contract = new web3.eth.Contract(abi, co);
        am = am * (10 ** digit);
        var amn = BigInt(am);
        amn += "";
        var tx = {
            from: fr,
            to: co,
            data: contract.methods.withdraw(pid, am).encodeABI()

        };
        web3.eth.sendTransaction(tx).then(res => {

        }).catch(err => {
            //console.log("err",err)
        });

    }
</script>



<script>
    {
        async function f1(pid) {

            // //  const web3 = new Web3(ethereum); 
            if (CONNECT) {} else return;

            const accounts = await ethereum.request({
                method: 'eth_requestAccounts'
            });
            var fr = accounts[0];

            var contract = new web3.eth.Contract(abi, CONTRACT);



            try {



                await contract.methods.balanceLP(pid, fr).call().then(function(resp) {
                    {
                        let lpa = Math.floor((resp * 1) / (10 ** 10)) / (10 ** 8);
                        $("#userlp-" + pid).html(lpa.toFixed(8));
                        $(".userlp-" + pid).html(lpa.toFixed(8));

                        $("#lpu-" + pid).html((RATELP * (resp * 1) * 2).toFixed(2));
                    }

                });
            } catch (error) {

            }

            try {



                await contract.methods.balanceAvailable(pid, fr).call().then(function(resp) {

                    {
                        $("#wdlp-" + pid).html(((resp * 1) / (10 ** 18).toFixed(8)).toFixed(8));
                        $("#lpa-" + pid).html((RATELP * (resp * 1) * 2).toFixed(2));
                    }

                });
            } catch (error) {

            }

            try {



                await contract.methods.pendingReward(pid, fr).call().then(function(resp) {


                    $("#userreward-" + pid).html(((resp * 1)).toFixed(0));
                    $("#reward-" + pid).html((RATENNN * (resp * 1)).toFixed(2));

                });
            } catch (error) {

            }
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function ret() {
            f1(0);
            sleep(1000);

        }
        ret();
        setInterval(ret, 10000);

    }
</script>


<script>
    function his() {

        var data = {

        };

        //console.log(data);

        $.get("/farmapi", data)
            .done(function(data) {
                //console.log(data);

                let a = 0;
                data.pool.forEach(e => {
                    {

                        $("#totallp-" + a).html((Math.floor((e.totalLP * 1) / (10 ** 10)) / 10 ** 8).toFixed(8));
                        $("#lp-" + a).html((data.rate.lp * (e.totalLP * 1) * 2).toFixed(2));
                        $("#apr-" + a).html((e.apr * 1).toFixed(2));
                    }






                    a++;
                });

                RATENNN = data.rate.nnn;
                RATELP = data.rate.lp;




                $("#av").html((data.reward).toFixed(0));
                $("#avr").html((data.reward * data.rate.nnn).toFixed(2));


            });
    }
    his();
    setInterval(his, 10000);
</script>